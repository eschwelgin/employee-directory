{"version":3,"sources":["components/header.js","components/data-line.js","components/data-wrapper.js","data.js","components/search.js","App.js","serviceWorker.js","index.js"],"names":["Header","DataLine","props","employees","map","name","email","position","DataWrapper","useState","setEmployees","handleClick","sortBy","sortedEmployees","slice","sort","a","b","React","useEffect","onClick","key","id","SearchBox","state","search","results","handleChange","bind","event","this","length","setState","item","toLowerCase","includes","push","target","value","type","onChange","placeholder","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2c8d6296.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Header() {\n    return (\n        <h1>Employee Directory</h1>\n    )\n}\n\n","import React from 'react' \n\nexport default function DataLine(props) {\n    return (\n            props.employees.map(({ name, email, position })  => (\n                (\n                    <tr>\n                        <td>{name}</td>\n                        <td>{email}</td>\n                        <td>{position}</td>\n                    </tr>\n                )\n            ))\n    )\n}\n","import React, { useState } from 'react'\nimport DataLine from './data-line.js'\n\nconst DataWrapper = (props) => {\n\n    const [employees, setEmployees] = useState(props.employees)\n\n    function handleClick(sortBy) {\n        if (sortBy === \"name\") {\n            let sortedEmployees = props.employees.slice(0).sort((a, b) => (a.name > b.name) ? 1 : -1)\n            setEmployees(sortedEmployees) \n        } else if (sortBy === \"email\") {\n            let sortedEmployees = props.employees.slice(0).sort((a, b) => (a.email > b.email) ? 1 : -1)\n            setEmployees(sortedEmployees) \n\n        } else if (sortBy === \"position\") {\n            let sortedEmployees = props.employees.slice(0).sort((a, b) => (a.position > b.position) ? 1 : -1)\n            setEmployees(sortedEmployees) \n        }\n    }\n\n    React.useEffect(() => {\n        setEmployees(props.employees.slice(0).sort())\n    }, [props])\n\n    return (\n        <table> \n            <tr>\n                <th>Name <button onClick={() =>handleClick(\"name\")}>Sort</button></th>\n                <th>email <button onClick={() =>handleClick(\"email\")}>Sort</button></th>\n                <th>Position <button onClick={() =>handleClick(\"position\")}>Sort</button></th>\n            </tr>\n                <DataLine key={employees.id} employees={employees}/>\n        </table>\n    )\n}\n\n// const DataWrapper = (props) => {\n//     return (\n//         <table> \n//             <tr>\n//                 <th>Name</th>\n//                 <th>email</th>\n//                 <th>Position</th>\n//             </tr>\n//                 <DataLine employees={props.employees}/>\n//         </table>\n//     )\n// }\n\nexport default DataWrapper","const employees = [\n    {\n        id: 1,\n        name: \"Eric Schwelgin\",\n        email: \"eschwelgin@gmail.com\",\n        position: \"Just a guy who works here\"\n    }, \n    {\n        id: 2,\n        name: \"Tom Hanks\",\n        email: \"thank@gmail.com\",\n        position: \"Lost at sea\"\n    },\n    {\n        id: 3,\n        name: \"Angelina Jolie\",\n        email: \"ajolie@gmail.com\",\n        position: \"Baby Rescue\"\n    },\n    {\n        id: 4,\n        name: \"Elvis Presley\",\n        email: \"epres@gmail.com\",\n        position: \"Drug Testing\"\n    },\n    {\n        id: 5,\n        name: \"Oprah\",\n        email: \"freecar@gmail.com\",\n        position: \"Gratuity management\"\n    },\n    {\n        id: 6,\n        name: \"Steven Spielburg\",\n        email: \"ss@gmail.com\",\n        position: \"Youtube Master\"\n    }\n]\n\nexport default employees","import React from 'react'\nimport DataWrapper from './data-wrapper.js'\nimport employees from '../data.js'\n\n\nclass SearchBox extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            search: '',\n            results: employees\n        }\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange(event) {\n        if (this.state.search.length <= 1) {\n            this.setState({\n                results: employees\n            })\n        } else if (this.state.search.length >= 2) {\n            let results = []\n\n            // eslint-disable-next-line\n            let stupidVar = employees.map(item => {\n                if (item.name.toLowerCase().includes(this.state.search.toLowerCase()) \n                || item.email.toLowerCase().includes(this.state.search.toLowerCase()) \n                || item.position.toLowerCase().includes(this.state.search.toLowerCase())) {\n                    results.push(item)\n                }\n            })\n\n            // const { name, value } = event.target\n            this.setState({ \n                search: event.target.value,\n                results: results\n            })\n        }\n\n        this.setState({ \n            search: event.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <input\n                    type=\"text\"\n                    name=\"search\"\n                    value={this.state.search}\n                    onChange={this.handleChange}\n                    placeholder=\"Search\"\n                />\n                <DataWrapper employees={this.state.results} />\n            </div>\n        );\n    }\n    \n}\nexport default SearchBox;\n  ","import React from 'react';\nimport './App.css';\nimport Header from \"./components/header.js\"\nimport SearchBox from './components/search.js'\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <SearchBox />\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}